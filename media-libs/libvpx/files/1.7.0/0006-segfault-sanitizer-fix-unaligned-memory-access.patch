From bf28c2d9e9f73f8f3c9d959abe8e9a7546906472 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Matthias=20R=C3=A4ncker?= <theonetruecamper@gmx.de>
Date: Sun, 9 Sep 2018 22:50:49 +0200
Subject: [PATCH 06/12] segfault/sanitizer: fix unaligned memory access
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
Change-Id: I2b9b886ca22663e8bc7f1ca114158bfacdec125a
---
 vpx_dsp/psnrhvs.c             |  7 +++++--
 vpx_dsp/x86/avg_intrin_sse2.c |  8 ++++++++
 vpx_dsp/x86/avg_pred_sse2.c   |  9 +++++----
 vpx_dsp/x86/loopfilter_sse2.c | 17 +++++++++--------
 vpx_dsp/x86/variance_sse2.c   |  5 +++--
 vpx_ports/align.h             | 36 ++++++++++++++++++++++++++++++++++++
 6 files changed, 66 insertions(+), 16 deletions(-)
 create mode 100644 vpx_ports/align.h

diff --git a/vpx_dsp/psnrhvs.c b/vpx_dsp/psnrhvs.c
index b3910152c..450bf984c 100644
--- a/vpx_dsp/psnrhvs.c
+++ b/vpx_dsp/psnrhvs.c
@@ -18,6 +18,7 @@
 #include "./vpx_config.h"
 #include "./vpx_dsp_rtcd.h"
 #include "vpx_dsp/ssim.h"
+#include "vpx_ports/align.h"
 #include "vpx_ports/system_state.h"
 #include "vpx_dsp/psnr.h"
 
@@ -126,8 +127,10 @@ static double calc_psnrhvs(const unsigned char *src, int _systride,
   const uint8_t *_dst8 = dst;
   const uint16_t *_src16 = CONVERT_TO_SHORTPTR(src);
   const uint16_t *_dst16 = CONVERT_TO_SHORTPTR(dst);
-  int16_t dct_s[8 * 8], dct_d[8 * 8];
-  tran_low_t dct_s_coef[8 * 8], dct_d_coef[8 * 8];
+  VPX_ALIGNED int16_t dct_s[8 * 8];
+  VPX_ALIGNED int16_t dct_d[8 * 8];
+  VPX_ALIGNED tran_low_t dct_s_coef[8 * 8];
+  VPX_ALIGNED tran_low_t dct_d_coef[8 * 8];
   double mask[8][8];
   int pixels;
   int x;
diff --git a/vpx_dsp/x86/avg_intrin_sse2.c b/vpx_dsp/x86/avg_intrin_sse2.c
index a235ba41d..77217b794 100644
--- a/vpx_dsp/x86/avg_intrin_sse2.c
+++ b/vpx_dsp/x86/avg_intrin_sse2.c
@@ -9,12 +9,20 @@
  */
 
 #include <emmintrin.h>
+#include <string.h>
 
 #include "./vpx_dsp_rtcd.h"
 #include "vpx/vpx_integer.h"
 #include "vpx_dsp/x86/bitdepth_conversion_sse2.h"
 #include "vpx_ports/mem.h"
 
+static inline __m128i _mm_loadu_epi64(const __m128i *p) {
+  __m64 v;
+  memcpy(&v, p, sizeof(v));
+  return _mm_set_epi64((__m64)0LL, v);
+}
+#define _mm_loadl_epi64 _mm_loadu_epi64
+
 void vpx_minmax_8x8_sse2(const uint8_t *s, int p, const uint8_t *d, int dp,
                          int *min, int *max) {
   __m128i u0, s0, d0, diff, maxabsdiff, minabsdiff, negdiff, absdiff0, absdiff;
diff --git a/vpx_dsp/x86/avg_pred_sse2.c b/vpx_dsp/x86/avg_pred_sse2.c
index f83b26490..2640d1469 100644
--- a/vpx_dsp/x86/avg_pred_sse2.c
+++ b/vpx_dsp/x86/avg_pred_sse2.c
@@ -13,6 +13,7 @@
 
 #include "./vpx_dsp_rtcd.h"
 #include "vpx/vpx_integer.h"
+#include "vpx_ports/align.h"
 
 void vpx_comp_avg_pred_sse2(uint8_t *comp, const uint8_t *pred, int width,
                             int height, const uint8_t *ref, int ref_stride) {
@@ -45,10 +46,10 @@ void vpx_comp_avg_pred_sse2(uint8_t *comp, const uint8_t *pred, int width,
         r = _mm_loadu_si128((const __m128i *)ref);
         ref += 16;
       } else if (width == 4) {
-        r = _mm_set_epi32(*(const uint32_t *)(ref + 3 * ref_stride),
-                          *(const uint32_t *)(ref + 2 * ref_stride),
-                          *(const uint32_t *)(ref + ref_stride),
-                          *(const uint32_t *)(ref));
+        r = _mm_set_epi32(vpx_load_unaligned_uint32(ref + 3 * ref_stride),
+                          vpx_load_unaligned_uint32(ref + 2 * ref_stride),
+                          vpx_load_unaligned_uint32(ref + ref_stride),
+                          vpx_load_unaligned_uint32(ref));
 
         ref += 4 * ref_stride;
       } else {
diff --git a/vpx_dsp/x86/loopfilter_sse2.c b/vpx_dsp/x86/loopfilter_sse2.c
index 28e6fd65f..9c9873a6c 100644
--- a/vpx_dsp/x86/loopfilter_sse2.c
+++ b/vpx_dsp/x86/loopfilter_sse2.c
@@ -11,6 +11,7 @@
 #include <emmintrin.h>  // SSE2
 
 #include "./vpx_dsp_rtcd.h"
+#include "vpx_ports/align.h"
 #include "vpx_ports/mem.h"
 #include "vpx_ports/emmintrin_compat.h"
 
@@ -212,21 +213,21 @@ void vpx_lpf_vertical_4_sse2(uint8_t *s, int p /* pitch */,
   // 00 10 20 30 01 11 21 31  02 12 22 32 03 13 23 33
   ps1ps0 = _mm_unpacklo_epi8(ps1ps0, x0);
 
-  *(int *)(s + 0 * p - 2) = _mm_cvtsi128_si32(ps1ps0);
+  vpx_store_unaligned_uint32(s + 0 * p - 2, _mm_cvtsi128_si32(ps1ps0));
   ps1ps0 = _mm_srli_si128(ps1ps0, 4);
-  *(int *)(s + 1 * p - 2) = _mm_cvtsi128_si32(ps1ps0);
+  vpx_store_unaligned_uint32(s + 1 * p - 2, _mm_cvtsi128_si32(ps1ps0));
   ps1ps0 = _mm_srli_si128(ps1ps0, 4);
-  *(int *)(s + 2 * p - 2) = _mm_cvtsi128_si32(ps1ps0);
+  vpx_store_unaligned_uint32(s + 2 * p - 2, _mm_cvtsi128_si32(ps1ps0));
   ps1ps0 = _mm_srli_si128(ps1ps0, 4);
-  *(int *)(s + 3 * p - 2) = _mm_cvtsi128_si32(ps1ps0);
+  vpx_store_unaligned_uint32(s + 3 * p - 2, _mm_cvtsi128_si32(ps1ps0));
 
-  *(int *)(s + 4 * p - 2) = _mm_cvtsi128_si32(qs1qs0);
+  vpx_store_unaligned_uint32(s + 4 * p - 2, _mm_cvtsi128_si32(qs1qs0));
   qs1qs0 = _mm_srli_si128(qs1qs0, 4);
-  *(int *)(s + 5 * p - 2) = _mm_cvtsi128_si32(qs1qs0);
+  vpx_store_unaligned_uint32(s + 5 * p - 2, _mm_cvtsi128_si32(qs1qs0));
   qs1qs0 = _mm_srli_si128(qs1qs0, 4);
-  *(int *)(s + 6 * p - 2) = _mm_cvtsi128_si32(qs1qs0);
+  vpx_store_unaligned_uint32(s + 6 * p - 2, _mm_cvtsi128_si32(qs1qs0));
   qs1qs0 = _mm_srli_si128(qs1qs0, 4);
-  *(int *)(s + 7 * p - 2) = _mm_cvtsi128_si32(qs1qs0);
+  vpx_store_unaligned_uint32(s + 7 * p - 2, _mm_cvtsi128_si32(qs1qs0));
 }
 
 void vpx_lpf_horizontal_16_sse2(unsigned char *s, int p,
diff --git a/vpx_dsp/x86/variance_sse2.c b/vpx_dsp/x86/variance_sse2.c
index 8d8bf183b..2271ee342 100644
--- a/vpx_dsp/x86/variance_sse2.c
+++ b/vpx_dsp/x86/variance_sse2.c
@@ -13,6 +13,7 @@
 #include "./vpx_config.h"
 #include "./vpx_dsp_rtcd.h"
 
+#include "vpx_ports/align.h"
 #include "vpx_ports/mem.h"
 
 typedef void (*getNxMvar_fn_t)(const unsigned char *src, int src_stride,
@@ -36,8 +37,8 @@ unsigned int vpx_get_mb_ss_sse2(const int16_t *src) {
 
 #define READ64(p, stride, i)                                  \
   _mm_unpacklo_epi8(                                          \
-      _mm_cvtsi32_si128(*(const uint32_t *)(p + i * stride)), \
-      _mm_cvtsi32_si128(*(const uint32_t *)(p + (i + 1) * stride)))
+      _mm_cvtsi32_si128(vpx_load_unaligned_uint32(p + i * stride)), \
+      _mm_cvtsi32_si128(vpx_load_unaligned_uint32(p + (i + 1) * stride)))
 
 static void get4x4var_sse2(const uint8_t *src, int src_stride,
                            const uint8_t *ref, int ref_stride,
diff --git a/vpx_ports/align.h b/vpx_ports/align.h
new file mode 100644
index 000000000..ca3b7eacf
--- /dev/null
+++ b/vpx_ports/align.h
@@ -0,0 +1,36 @@
+#ifndef VPX_PORTS_ALIGN_H_
+#define VPX_PORTS_ALIGN_H_
+
+#include <string.h>
+#include "./vpx_config.h"
+#include "vpx/vpx_integer.h"
+
+#ifdef _MSC_VER
+#define VPX_ALIGNAS(x) __declspec(align(x))
+#elif defined(__GNUC__) || defined(__clang__) || defined(__INTEL_COMPILER) || defined(__SUNPRO_C)
+#define VPX_ALIGNAS(x) __attribute__((aligned(x)))
+#else
+#define VPX_ALIGNAS(x)
+#endif
+
+#if HAVE_AVX512
+#define VPX_ALIGNED VPX_ALIGNAS(64)
+#elif HAVE_AVX
+#define VPX_ALIGNED VPX_ALIGNAS(32)
+#elif HAVE_SSE
+#define VPX_ALIGNED VPX_ALIGNAS(16)
+#else
+#define VPX_ALIGNED VPX_ALIGNAS(8)
+#endif
+
+static inline void vpx_store_unaligned_uint32(void* dst, uint32_t v) {
+    memcpy(dst, &v, sizeof(v));
+}
+
+static inline uint32_t vpx_load_unaligned_uint32(const void* src) {
+    uint32_t v;
+    memcpy(&v, src, sizeof(v));
+    return v;
+}
+
+#endif  // VPX_PORTS_ALIGN_H_
-- 
2.16.4

