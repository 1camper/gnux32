From 726e34138dfa5fa83010bd4d5272ab133b495f06 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Matthias=20R=C3=A4ncker?= <theonetruecamper@gmx.de>
Date: Sun, 9 Sep 2018 22:53:31 +0200
Subject: [PATCH 12/15] x32 support: vpx_dsp
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
Change-Id: Idd3de914c3ec111ce36301b6a95a2364690c83a3
---
 vpx_dsp/x86/highbd_intrapred_sse2.asm            | 12 ++++
 vpx_dsp/x86/highbd_sad4d_sse2.asm                | 10 ++--
 vpx_dsp/x86/highbd_subpel_variance_impl_sse2.asm | 71 +++++++++++++-----------
 vpx_dsp/x86/intrapred_sse2.asm                   | 43 ++++++++++++--
 vpx_dsp/x86/intrapred_ssse3.asm                  | 13 +++++
 vpx_dsp/x86/inv_wht_sse2.asm                     |  1 +
 vpx_dsp/x86/sad4d_sse2.asm                       | 12 ++--
 vpx_dsp/x86/ssim_opt_x86_64.asm                  | 12 ++--
 vpx_dsp/x86/subpel_variance_sse2.asm             | 10 ++++
 vpx_dsp/x86/subtract_sse2.asm                    | 12 ++--
 vpx_dsp/x86/vpx_convolve_copy_sse2.asm           |  2 +
 vpx_dsp/x86/vpx_subpixel_8t_ssse3.asm            | 10 ++++
 12 files changed, 149 insertions(+), 59 deletions(-)

diff --git a/vpx_dsp/x86/highbd_intrapred_sse2.asm b/vpx_dsp/x86/highbd_intrapred_sse2.asm
index c61b62104..90d07cdfa 100644
--- a/vpx_dsp/x86/highbd_intrapred_sse2.asm
+++ b/vpx_dsp/x86/highbd_intrapred_sse2.asm
@@ -21,6 +21,7 @@ INIT_XMM sse2
 cglobal highbd_dc_predictor_4x4, 4, 5, 4, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   movq                  m0, [aboveq]
   movq                  m2, [leftq]
   paddw                 m0, m2
@@ -44,6 +45,7 @@ INIT_XMM sse2
 cglobal highbd_dc_predictor_8x8, 4, 5, 4, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   mova                  m0, [aboveq]
   mova                  m2, [leftq]
@@ -79,6 +81,7 @@ INIT_XMM sse2
 cglobal highbd_dc_predictor_16x16, 4, 5, 5, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   mova                  m0, [aboveq]
   mova                  m3, [aboveq+16]
@@ -122,6 +125,7 @@ INIT_XMM sse2
 cglobal highbd_dc_predictor_32x32, 4, 5, 7, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   mova                  m0, [aboveq]
   mova                  m2, [aboveq+16]
   mova                  m3, [aboveq+32]
@@ -179,6 +183,7 @@ cglobal highbd_dc_predictor_32x32, 4, 5, 7, dst, stride, above, left, goffset
 
 INIT_XMM sse2
 cglobal highbd_v_predictor_4x4, 3, 3, 1, dst, stride, above
+  movsxdifnidn     strideq, stridep
   movq                  m0, [aboveq]
   movq    [dstq          ], m0
   movq    [dstq+strideq*2], m0
@@ -189,6 +194,7 @@ cglobal highbd_v_predictor_4x4, 3, 3, 1, dst, stride, above
 
 INIT_XMM sse2
 cglobal highbd_v_predictor_8x8, 3, 3, 1, dst, stride, above
+  movsxdifnidn     strideq, stridep
   mova                  m0, [aboveq]
   DEFINE_ARGS dst, stride, stride3
   lea             stride3q, [strideq*3]
@@ -205,6 +211,7 @@ cglobal highbd_v_predictor_8x8, 3, 3, 1, dst, stride, above
 
 INIT_XMM sse2
 cglobal highbd_v_predictor_16x16, 3, 4, 2, dst, stride, above
+  movsxdifnidn     strideq, stridep
   mova                  m0, [aboveq]
   mova                  m1, [aboveq+16]
   DEFINE_ARGS dst, stride, stride3, nlines4
@@ -226,6 +233,7 @@ cglobal highbd_v_predictor_16x16, 3, 4, 2, dst, stride, above
 
 INIT_XMM sse2
 cglobal highbd_v_predictor_32x32, 3, 4, 4, dst, stride, above
+  movsxdifnidn     strideq, stridep
   mova                  m0, [aboveq]
   mova                  m1, [aboveq+16]
   mova                  m2, [aboveq+32]
@@ -257,6 +265,7 @@ cglobal highbd_v_predictor_32x32, 3, 4, 4, dst, stride, above
 
 INIT_XMM sse2
 cglobal highbd_tm_predictor_4x4, 5, 5, 6, dst, stride, above, left, bps
+  movsxdifnidn     strideq, stridep
   movd                  m1, [aboveq-2]
   movq                  m0, [aboveq]
   pshuflw               m1, m1, 0x0
@@ -296,6 +305,7 @@ cglobal highbd_tm_predictor_4x4, 5, 5, 6, dst, stride, above, left, bps
 
 INIT_XMM sse2
 cglobal highbd_tm_predictor_8x8, 5, 6, 5, dst, stride, above, left, bps, one
+  movsxdifnidn     strideq, stridep
   movd                  m1, [aboveq-2]
   mova                  m0, [aboveq]
   pshuflw               m1, m1, 0x0
@@ -340,6 +350,7 @@ cglobal highbd_tm_predictor_8x8, 5, 6, 5, dst, stride, above, left, bps, one
 
 INIT_XMM sse2
 cglobal highbd_tm_predictor_16x16, 5, 5, 8, dst, stride, above, left, bps
+  movsxdifnidn     strideq, stridep
   movd                  m2, [aboveq-2]
   mova                  m0, [aboveq]
   mova                  m1, [aboveq+16]
@@ -387,6 +398,7 @@ cglobal highbd_tm_predictor_16x16, 5, 5, 8, dst, stride, above, left, bps
 
 INIT_XMM sse2
 cglobal highbd_tm_predictor_32x32, 5, 5, 8, dst, stride, above, left, bps
+  movsxdifnidn     strideq, stridep
   movd                  m0, [aboveq-2]
   mova                  m1, [aboveq]
   mova                  m2, [aboveq+16]
diff --git a/vpx_dsp/x86/highbd_sad4d_sse2.asm b/vpx_dsp/x86/highbd_sad4d_sse2.asm
index 6c2a61e01..cb3ba1479 100644
--- a/vpx_dsp/x86/highbd_sad4d_sse2.asm
+++ b/vpx_dsp/x86/highbd_sad4d_sse2.asm
@@ -231,10 +231,10 @@ cglobal highbd_sad%1x%2x4d, 4, 7, 8, src, src_stride, ref1, ref_stride, \
 
   movsxdifnidn src_strideq, src_strided
   movsxdifnidn ref_strideq, ref_strided
-  mov                ref2q, [ref1q+gprsize*1]
-  mov                ref3q, [ref1q+gprsize*2]
-  mov                ref4q, [ref1q+gprsize*3]
-  mov                ref1q, [ref1q+gprsize*0]
+  mov                ref2p, [ref1q+ptrsize*1]
+  mov                ref3p, [ref1q+ptrsize*2]
+  mov                ref4p, [ref1q+ptrsize*3]
+  mov                ref1p, [ref1q+ptrsize*0]
 
 ; convert byte pointers to short pointers
   shl                 srcq, 1
@@ -265,7 +265,7 @@ cglobal highbd_sad%1x%2x4d, 4, 7, 8, src, src_stride, ref1, ref_stride, \
   paddd                 m4, m0
   paddd                 m6, m1
   punpcklqdq            m4, m6
-  movifnidn             r4, r4mp
+  movifnidn            r4p, r4mx
   movu                [r4], m4
   RET
 %endmacro
diff --git a/vpx_dsp/x86/highbd_subpel_variance_impl_sse2.asm b/vpx_dsp/x86/highbd_subpel_variance_impl_sse2.asm
index 30ee81b68..7f4e20f3b 100644
--- a/vpx_dsp/x86/highbd_subpel_variance_impl_sse2.asm
+++ b/vpx_dsp/x86/highbd_subpel_variance_impl_sse2.asm
@@ -70,7 +70,7 @@ SECTION .text
   pshufd               m4, m6, 0x1
   paddd                m7, m3
   paddd                m6, m4
-  mov                  r1, ssem         ; r1 = unsigned int *sse
+  mov                 r1p, ssemx        ; r1 = unsigned int *sse
   movd               [r1], m7           ; store sse
   movd                rax, m6           ; store sum as return value
 %endif
@@ -79,8 +79,8 @@ SECTION .text
 
 %macro INC_SRC_BY_SRC_STRIDE  0
 %if ARCH_X86=1 && CONFIG_PIC=1
-  add                srcq, src_stridemp
-  add                srcq, src_stridemp
+  add                srcp, src_stridemx
+  add                srcp, src_stridemx
 %else
   lea                srcq, [srcq + src_strideq*2]
 %endif
@@ -97,13 +97,19 @@ SECTION .text
                                       x_offset, y_offset, \
                                       dst, dst_stride, \
                                       sec, sec_stride, height, sse
-    %define sec_str sec_strideq
+    %define sec_str sec_stridep
+    %if ABI_X32
+      mov        secp, secp
+    %endif
   %else
     cglobal highbd_sub_pixel_variance%1xh, 7, 8, 13, src, src_stride, x_offset, \
                                   y_offset, dst, dst_stride, height, sse
   %endif
   %define block_height heightd
   %define bilin_filter sseq
+  %if ABI_X32
+    mov        ssep, ssep
+  %endif
 %else
   %if ARCH_X86=1 && CONFIG_PIC=1
     %if %2 == 1 ; avg
@@ -173,6 +179,9 @@ SECTION .text
   %endif
 %endif
 
+  movsxdifnidn src_strideq, src_stridep
+  movsxdifnidn dst_strideq, dst_stridep
+
   ASSERT               %1 <= 16         ; m6 overflows if w > 16
   pxor                 m6, m6           ; sum
   pxor                 m7, m7           ; sse
@@ -207,7 +216,7 @@ SECTION .text
   lea                srcq, [srcq + src_strideq*2]
   lea                dstq, [dstq + dst_strideq*2]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %else ; %1 < 16
   movu                 m0, [srcq]
@@ -216,7 +225,7 @@ SECTION .text
   mova                 m3, [dstq + dst_strideq*2]
 %if %2 == 1 ; avg
   pavgw                m0, [secq]
-  add                secq, sec_str
+  add                secp, sec_str
   pavgw                m2, [secq]
 %endif
   SUM_SSE              m0, m1, m2, m3, m6, m7
@@ -224,7 +233,7 @@ SECTION .text
   lea                srcq, [srcq + src_strideq*4]
   lea                dstq, [dstq + dst_strideq*4]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %endif
   dec                   block_height
@@ -255,7 +264,7 @@ SECTION .text
   lea                srcq, [srcq + src_strideq*2]
   lea                dstq, [dstq + dst_strideq*2]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %else ; %1 < 16
   movu                 m0, [srcq]
@@ -267,7 +276,7 @@ SECTION .text
   pavgw                m1, m5
 %if %2 == 1 ; avg
   pavgw                m0, [secq]
-  add                secq, sec_str
+  add                secp, sec_str
   pavgw                m1, [secq]
 %endif
   SUM_SSE              m0, m2, m1, m3, m6, m7
@@ -275,7 +284,7 @@ SECTION .text
   lea                srcq, [srcq + src_strideq*4]
   lea                dstq, [dstq + dst_strideq*4]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %endif
   dec                   block_height
@@ -344,7 +353,7 @@ SECTION .text
   lea                srcq, [srcq + src_strideq*2]
   lea                dstq, [dstq + dst_strideq*2]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %else ; %1 < 16
   movu                 m0, [srcq]
@@ -365,7 +374,7 @@ SECTION .text
   psrlw                m0, 4
 %if %2 == 1 ; avg
   pavgw                m0, [secq]
-  add                secq, sec_str
+  add                secp, sec_str
   pavgw                m1, [secq]
 %endif
   SUM_SSE              m0, m2, m1, m3, m6, m7
@@ -373,7 +382,7 @@ SECTION .text
   lea                srcq, [srcq + src_strideq*4]
   lea                dstq, [dstq + dst_strideq*4]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %endif
   dec                   block_height
@@ -410,7 +419,7 @@ SECTION .text
   lea                srcq, [srcq + src_strideq*2]
   lea                dstq, [dstq + dst_strideq*2]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %else ; %1 < 16
   movu                 m0, [srcq]
@@ -423,7 +432,7 @@ SECTION .text
   pavgw                m1, m5
 %if %2 == 1 ; avg
   pavgw                m0, [secq]
-  add                secq, sec_str
+  add                secp, sec_str
   pavgw                m1, [secq]
 %endif
   SUM_SSE              m0, m2, m1, m3, m6, m7
@@ -431,7 +440,7 @@ SECTION .text
   lea                srcq, [srcq + src_strideq*4]
   lea                dstq, [dstq + dst_strideq*4]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %endif
   dec                   block_height
@@ -473,7 +482,7 @@ SECTION .text
   lea                srcq, [srcq + src_strideq*2]
   lea                dstq, [dstq + dst_strideq*2]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %else ; %1 < 16
   movu                 m0, [srcq]
@@ -493,7 +502,7 @@ SECTION .text
   mova                 m5, [dstq + dst_strideq*2]
 %if %2 == 1 ; avg
   pavgw                m0, [secq]
-  add                secq, sec_str
+  add                secp, sec_str
   pavgw                m2, [secq]
 %endif
   SUM_SSE              m0, m4, m2, m5, m6, m7
@@ -502,7 +511,7 @@ SECTION .text
   lea                srcq, [srcq + src_strideq*4]
   lea                dstq, [dstq + dst_strideq*4]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %endif
   dec                   block_height
@@ -579,7 +588,7 @@ SECTION .text
   lea                srcq, [srcq + src_strideq*2]
   lea                dstq, [dstq + dst_strideq*2]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %else ; %1 < 16
   movu                 m0, [srcq]
@@ -609,7 +618,7 @@ SECTION .text
   mova                 m3, [dstq+dst_strideq*2]
 %if %2 == 1 ; avg
   pavgw                m0, [secq]
-  add                secq, sec_str
+  add                secp, sec_str
   pavgw                m4, [secq]
 %endif
   SUM_SSE              m0, m2, m4, m3, m6, m7
@@ -618,7 +627,7 @@ SECTION .text
   lea                srcq, [srcq + src_strideq*4]
   lea                dstq, [dstq + dst_strideq*4]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %endif
   dec                   block_height
@@ -688,7 +697,7 @@ SECTION .text
   lea                srcq, [srcq+src_strideq*2]
   lea                dstq, [dstq+dst_strideq*2]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %else ; %1 < 16
   movu                 m0, [srcq]
@@ -709,7 +718,7 @@ SECTION .text
   psrlw                m0, 4
 %if %2 == 1 ; avg
   pavgw                m0, [secq]
-  add                secq, sec_str
+  add                secp, sec_str
   pavgw                m1, [secq]
 %endif
   SUM_SSE              m0, m4, m1, m5, m6, m7
@@ -717,7 +726,7 @@ SECTION .text
   lea                srcq, [srcq+src_strideq*4]
   lea                dstq, [dstq+dst_strideq*4]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %endif
   dec                   block_height
@@ -806,7 +815,7 @@ SECTION .text
   lea                srcq, [srcq+src_strideq*2]
   lea                dstq, [dstq+dst_strideq*2]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %else ; %1 < 16
   movu                 m0, [srcq]
@@ -838,7 +847,7 @@ SECTION .text
   pavgw                m2, m3
 %if %2 == 1 ; avg
   pavgw                m0, [secq]
-  add                secq, sec_str
+  add                secp, sec_str
   pavgw                m2, [secq]
 %endif
   SUM_SSE              m0, m4, m2, m5, m6, m7
@@ -847,7 +856,7 @@ SECTION .text
   lea                srcq, [srcq+src_strideq*4]
   lea                dstq, [dstq+dst_strideq*4]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %endif
   dec                   block_height
@@ -961,7 +970,7 @@ SECTION .text
   INC_SRC_BY_SRC_STRIDE
   lea                dstq, [dstq + dst_strideq * 2]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %else ; %1 < 16
   movu                 m0, [srcq]
@@ -1006,7 +1015,7 @@ SECTION .text
   mova                 m3, [dstq+dst_strideq*2]
 %if %2 == 1 ; avg
   pavgw                m0, [secq]
-  add                secq, sec_str
+  add                secp, sec_str
   pavgw                m4, [secq]
 %endif
   SUM_SSE              m0, m2, m4, m3, m6, m7
@@ -1015,7 +1024,7 @@ SECTION .text
   INC_SRC_BY_SRC_STRIDE
   lea                dstq, [dstq + dst_strideq * 4]
 %if %2 == 1 ; avg
-  add                secq, sec_str
+  add                secp, sec_str
 %endif
 %endif
   dec                   block_height
diff --git a/vpx_dsp/x86/intrapred_sse2.asm b/vpx_dsp/x86/intrapred_sse2.asm
index c18095c28..569e440af 100644
--- a/vpx_dsp/x86/intrapred_sse2.asm
+++ b/vpx_dsp/x86/intrapred_sse2.asm
@@ -45,6 +45,7 @@ INIT_XMM sse2
 cglobal d45_predictor_4x4, 3, 4, 4, dst, stride, above, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn    strideq, stridep
   movq                 m0, [aboveq]
   DEFINE_ARGS dst, stride, temp
   psrldq               m1, m0, 1
@@ -71,6 +72,7 @@ INIT_XMM sse2
 cglobal d45_predictor_8x8, 3, 4, 4, dst, stride, above, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn    strideq, stridep
   movu                m1, [aboveq]
   pslldq              m0, m1, 1
   psrldq              m2, m1, 1
@@ -110,6 +112,7 @@ INIT_XMM sse2
 cglobal d207_predictor_4x4, 4, 4, 5, dst, stride, unused, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn   strideq, stridep
   movd                m0, [leftq]                ; abcd [byte]
   punpcklbw           m4, m0, m0                 ; aabb ccdd
   punpcklwd           m4, m4                     ; aaaa bbbb cccc dddd
@@ -137,6 +140,7 @@ INIT_XMM sse2
 cglobal dc_predictor_4x4, 4, 5, 3, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   movd                  m2, [leftq]
   movd                  m0, [aboveq]
   pxor                  m1, m1
@@ -157,7 +161,8 @@ cglobal dc_predictor_4x4, 4, 5, 3, dst, stride, above, left, goffset
 
 INIT_XMM sse2
 cglobal dc_left_predictor_4x4, 2, 5, 2, dst, stride, above, left, goffset
-  movifnidn          leftq, leftmp
+  movsxdifnidn     strideq, stridep
+  movifnidn          leftp, leftmx
   GET_GOT     goffsetq
 
   pxor                  m1, m1
@@ -180,6 +185,7 @@ INIT_XMM sse2
 cglobal dc_top_predictor_4x4, 3, 5, 2, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   movd                  m0, [aboveq]
   psadbw                m0, m1
@@ -200,6 +206,7 @@ INIT_XMM sse2
 cglobal dc_predictor_8x8, 4, 5, 3, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   movq                  m0, [aboveq]
   movq                  m2, [leftq]
@@ -229,6 +236,7 @@ INIT_XMM sse2
 cglobal dc_top_predictor_8x8, 3, 5, 2, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   movq                  m0, [aboveq]
   DEFINE_ARGS dst, stride, stride3
@@ -253,7 +261,8 @@ cglobal dc_top_predictor_8x8, 3, 5, 2, dst, stride, above, left, goffset
 
 INIT_XMM sse2
 cglobal dc_left_predictor_8x8, 2, 5, 2, dst, stride, above, left, goffset
-  movifnidn          leftq, leftmp
+  movsxdifnidn     strideq, stridep
+  movifnidn          leftp, leftmx
   GET_GOT     goffsetq
 
   pxor                  m1, m1
@@ -282,6 +291,7 @@ INIT_XMM sse2
 cglobal dc_128_predictor_4x4, 2, 5, 1, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   DEFINE_ARGS dst, stride, stride3
   lea             stride3q, [strideq*3]
   movd     m0,        [GLOBAL(dc_128)]
@@ -296,6 +306,7 @@ INIT_XMM sse2
 cglobal dc_128_predictor_8x8, 2, 5, 1, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   DEFINE_ARGS dst, stride, stride3
   lea             stride3q, [strideq*3]
   movq    m0,        [GLOBAL(dc_128)]
@@ -315,6 +326,7 @@ INIT_XMM sse2
 cglobal dc_predictor_16x16, 4, 5, 3, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   mova                  m0, [aboveq]
   mova                  m2, [leftq]
@@ -348,6 +360,7 @@ INIT_XMM sse2
 cglobal dc_top_predictor_16x16, 4, 5, 3, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   mova                  m0, [aboveq]
   DEFINE_ARGS dst, stride, stride3, lines4
@@ -377,6 +390,7 @@ INIT_XMM sse2
 cglobal dc_left_predictor_16x16, 4, 5, 3, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   mova                  m0, [leftq]
   DEFINE_ARGS dst, stride, stride3, lines4
@@ -406,6 +420,7 @@ INIT_XMM sse2
 cglobal dc_128_predictor_16x16, 4, 5, 3, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   DEFINE_ARGS dst, stride, stride3, lines4
   lea             stride3q, [strideq*3]
   mov              lines4d, 4
@@ -426,6 +441,7 @@ INIT_XMM sse2
 cglobal dc_predictor_32x32, 4, 5, 5, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   mova                  m0, [aboveq]
   mova                  m2, [aboveq+16]
@@ -468,6 +484,7 @@ INIT_XMM sse2
 cglobal dc_top_predictor_32x32, 4, 5, 5, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   mova                  m0, [aboveq]
   mova                  m2, [aboveq+16]
@@ -504,6 +521,7 @@ INIT_XMM sse2
 cglobal dc_left_predictor_32x32, 4, 5, 5, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   mova                  m0, [leftq]
   mova                  m2, [leftq+16]
@@ -540,6 +558,7 @@ INIT_XMM sse2
 cglobal dc_128_predictor_32x32, 4, 5, 3, dst, stride, above, left, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn     strideq, stridep
   DEFINE_ARGS dst, stride, stride3, lines4
   lea             stride3q, [strideq*3]
   mov              lines4d, 8
@@ -561,6 +580,7 @@ cglobal dc_128_predictor_32x32, 4, 5, 3, dst, stride, above, left, goffset
 
 INIT_XMM sse2
 cglobal v_predictor_4x4, 3, 3, 1, dst, stride, above
+  movsxdifnidn     strideq, stridep
   movd                  m0, [aboveq]
   movd      [dstq        ], m0
   movd      [dstq+strideq], m0
@@ -571,6 +591,7 @@ cglobal v_predictor_4x4, 3, 3, 1, dst, stride, above
 
 INIT_XMM sse2
 cglobal v_predictor_8x8, 3, 3, 1, dst, stride, above
+  movsxdifnidn     strideq, stridep
   movq                  m0, [aboveq]
   DEFINE_ARGS dst, stride, stride3
   lea             stride3q, [strideq*3]
@@ -587,6 +608,7 @@ cglobal v_predictor_8x8, 3, 3, 1, dst, stride, above
 
 INIT_XMM sse2
 cglobal v_predictor_16x16, 3, 4, 1, dst, stride, above
+  movsxdifnidn     strideq, stridep
   mova                  m0, [aboveq]
   DEFINE_ARGS dst, stride, stride3, nlines4
   lea             stride3q, [strideq*3]
@@ -603,6 +625,7 @@ cglobal v_predictor_16x16, 3, 4, 1, dst, stride, above
 
 INIT_XMM sse2
 cglobal v_predictor_32x32, 3, 4, 2, dst, stride, above
+  movsxdifnidn     strideq, stridep
   mova                  m0, [aboveq]
   mova                  m1, [aboveq+16]
   DEFINE_ARGS dst, stride, stride3, nlines4
@@ -624,7 +647,8 @@ cglobal v_predictor_32x32, 3, 4, 2, dst, stride, above
 
 INIT_XMM sse2
 cglobal h_predictor_4x4, 2, 4, 4, dst, stride, line, left
-  movifnidn          leftq, leftmp
+  movsxdifnidn     strideq, stridep
+  movifnidn          leftp, leftmx
   movd                  m0, [leftq]
   punpcklbw             m0, m0
   punpcklbw             m0, m0
@@ -640,7 +664,8 @@ cglobal h_predictor_4x4, 2, 4, 4, dst, stride, line, left
 
 INIT_XMM sse2
 cglobal h_predictor_8x8, 2, 5, 3, dst, stride, line, left
-  movifnidn          leftq, leftmp
+  movsxdifnidn     strideq, stridep
+  movifnidn          leftp, leftmx
   mov                lineq, -2
   DEFINE_ARGS  dst, stride, line, left, stride3
   lea             stride3q, [strideq*3]
@@ -663,7 +688,8 @@ cglobal h_predictor_8x8, 2, 5, 3, dst, stride, line, left
 
 INIT_XMM sse2
 cglobal h_predictor_16x16, 2, 5, 3, dst, stride, line, left
-  movifnidn          leftq, leftmp
+  movsxdifnidn     strideq, stridep
+  movifnidn          leftp, leftmx
   mov                lineq, -4
   DEFINE_ARGS dst, stride, line, left, stride3
   lea             stride3q, [strideq*3]
@@ -687,7 +713,8 @@ cglobal h_predictor_16x16, 2, 5, 3, dst, stride, line, left
 
 INIT_XMM sse2
 cglobal h_predictor_32x32, 2, 5, 3, dst, stride, line, left
-  movifnidn              leftq, leftmp
+  movsxdifnidn         strideq, stridep
+  movifnidn              leftp, leftmx
   mov                    lineq, -8
   DEFINE_ARGS dst, stride, line, left, stride3
   lea                 stride3q, [strideq*3]
@@ -715,6 +742,7 @@ cglobal h_predictor_32x32, 2, 5, 3, dst, stride, line, left
 
 INIT_XMM sse2
 cglobal tm_predictor_4x4, 4, 4, 5, dst, stride, above, left
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   movq                  m0, [aboveq-1]; [63:0] tl t1 t2 t3 t4 x x x
   punpcklbw             m0, m1
@@ -744,6 +772,7 @@ cglobal tm_predictor_4x4, 4, 4, 5, dst, stride, above, left
 
 INIT_XMM sse2
 cglobal tm_predictor_8x8, 4, 4, 5, dst, stride, above, left
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   movd                  m2, [aboveq-1]
   movq                  m0, [aboveq]
@@ -774,6 +803,7 @@ cglobal tm_predictor_8x8, 4, 4, 5, dst, stride, above, left
 
 INIT_XMM sse2
 cglobal tm_predictor_16x16, 4, 5, 8, dst, stride, above, left
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   mova                  m2, [aboveq-16];
   mova                  m0, [aboveq]   ; t1 t2 ... t16 [byte]
@@ -812,6 +842,7 @@ cglobal tm_predictor_16x16, 4, 5, 8, dst, stride, above, left
 
 INIT_XMM sse2
 cglobal tm_predictor_32x32, 4, 4, 8, dst, stride, above, left
+  movsxdifnidn     strideq, stridep
   pxor                  m1, m1
   movd                  m2, [aboveq-1]
   mova                  m0, [aboveq]
diff --git a/vpx_dsp/x86/intrapred_ssse3.asm b/vpx_dsp/x86/intrapred_ssse3.asm
index 5e0139fa8..3f3c22be0 100644
--- a/vpx_dsp/x86/intrapred_ssse3.asm
+++ b/vpx_dsp/x86/intrapred_ssse3.asm
@@ -34,6 +34,7 @@ INIT_XMM ssse3
 cglobal d45_predictor_16x16, 3, 6, 4, dst, stride, above, dst8, line, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn      strideq, stridep
   mova                   m0, [aboveq]
   DEFINE_ARGS dst, stride, stride3, dst8, line
   lea              stride3q, [strideq*3]
@@ -85,6 +86,7 @@ INIT_XMM ssse3
 cglobal d45_predictor_32x32, 3, 6, 7, dst, stride, above, dst16, line, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn      strideq, stridep
   mova                   m0, [aboveq]
   mova                   m4, [aboveq+16]
   DEFINE_ARGS dst, stride, stride3, dst16, line
@@ -180,6 +182,7 @@ INIT_XMM ssse3
 cglobal d63_predictor_4x4, 3, 4, 5, dst, stride, above, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn   strideq, stridep
   movq                m3, [aboveq]
   pshufb              m1, m3, [GLOBAL(sh_b23456777)]
   pshufb              m2, m3, [GLOBAL(sh_b12345677)]
@@ -202,6 +205,7 @@ INIT_XMM ssse3
 cglobal d63_predictor_8x8, 3, 4, 5, dst, stride, above, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn   strideq, stridep
   movq                m3, [aboveq]
   DEFINE_ARGS dst, stride, stride3
   lea           stride3q, [strideq*3]
@@ -238,6 +242,7 @@ INIT_XMM ssse3
 cglobal d63_predictor_16x16, 3, 5, 5, dst, stride, above, line, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn   strideq, stridep
   mova                m0, [aboveq]
   DEFINE_ARGS dst, stride, stride3, line
   lea           stride3q, [strideq*3]
@@ -268,6 +273,7 @@ INIT_XMM ssse3
 cglobal d63_predictor_32x32, 3, 5, 8, dst, stride, above, line, goffset
   GET_GOT     goffsetq
 
+  movsxdifnidn      strideq, stridep
   mova                   m0, [aboveq]
   mova                   m7, [aboveq+16]
   DEFINE_ARGS dst, stride, stride3, line
@@ -312,6 +318,7 @@ cglobal d63_predictor_32x32, 3, 5, 8, dst, stride, above, line, goffset
 INIT_XMM ssse3
 cglobal d153_predictor_4x4, 4, 5, 4, dst, stride, above, left, goffset
   GET_GOT     goffsetq
+  movsxdifnidn   strideq, stridep
   movd                m0, [leftq]               ; l1, l2, l3, l4
   movd                m1, [aboveq-1]            ; tl, t1, t2, t3
   punpckldq           m0, m1                    ; l1, l2, l3, l4, tl, t1, t2, t3
@@ -344,6 +351,7 @@ cglobal d153_predictor_4x4, 4, 5, 4, dst, stride, above, left, goffset
 INIT_XMM ssse3
 cglobal d153_predictor_8x8, 4, 5, 8, dst, stride, above, left, goffset
   GET_GOT     goffsetq
+  movsxdifnidn   strideq, stridep
   movq                m0, [leftq]                     ; [0- 7] l1-8 [byte]
   movhps              m0, [aboveq-1]                  ; [8-15] tl, t1-7 [byte]
   pshufb              m1, m0, [GLOBAL(sh_b76543210)]  ; l8-1 [word]
@@ -393,6 +401,7 @@ cglobal d153_predictor_8x8, 4, 5, 8, dst, stride, above, left, goffset
 INIT_XMM ssse3
 cglobal d153_predictor_16x16, 4, 5, 8, dst, stride, above, left, goffset
   GET_GOT     goffsetq
+  movsxdifnidn   strideq, stridep
   mova                m0, [leftq]
   movu                m7, [aboveq-1]
   ; comments below are for a predictor like this
@@ -472,6 +481,7 @@ cglobal d153_predictor_16x16, 4, 5, 8, dst, stride, above, left, goffset
 INIT_XMM ssse3
 cglobal d153_predictor_32x32, 4, 5, 8, dst, stride, above, left, goffset
   GET_GOT     goffsetq
+  movsxdifnidn     strideq, stridep
   mova                  m0, [leftq]
   movu                  m7, [aboveq-1]
   movu                  m1, [aboveq+15]
@@ -649,6 +659,7 @@ cglobal d153_predictor_32x32, 4, 5, 8, dst, stride, above, left, goffset
 INIT_XMM ssse3
 cglobal d207_predictor_8x8, 4, 5, 4, dst, stride, stride3, left, goffset
   GET_GOT     goffsetq
+  movsxdifnidn   strideq, stridep
   movq                m3, [leftq]            ; abcdefgh [byte]
   lea           stride3q, [strideq*3]
 
@@ -683,6 +694,7 @@ cglobal d207_predictor_8x8, 4, 5, 4, dst, stride, stride3, left, goffset
 INIT_XMM ssse3
 cglobal d207_predictor_16x16, 4, 5, 5, dst, stride, stride3, left, goffset
   GET_GOT     goffsetq
+  movsxdifnidn   strideq, stridep
   lea           stride3q, [strideq*3]
   mova                m0, [leftq]            ; abcdefghijklmnop [byte]
   pshufb              m1, m0, [GLOBAL(sh_b123456789abcdeff)] ; bcdefghijklmnopp
@@ -730,6 +742,7 @@ cglobal d207_predictor_16x16, 4, 5, 5, dst, stride, stride3, left, goffset
 INIT_XMM ssse3
 cglobal d207_predictor_32x32, 4, 5, 8, dst, stride, stride3, left, goffset
   GET_GOT     goffsetq
+  movsxdifnidn   strideq, stridep
   lea           stride3q, [strideq*3]
   mova                m1, [leftq]              ;  0-15 [byte]
   mova                m2, [leftq+16]           ; 16-31 [byte]
diff --git a/vpx_dsp/x86/inv_wht_sse2.asm b/vpx_dsp/x86/inv_wht_sse2.asm
index fbbcd76bd..96f49b6ec 100644
--- a/vpx_dsp/x86/inv_wht_sse2.asm
+++ b/vpx_dsp/x86/inv_wht_sse2.asm
@@ -82,6 +82,7 @@ SECTION .text
 
 INIT_XMM sse2
 cglobal iwht4x4_16_add, 3, 3, 7, input, output, stride
+  movsxdifnidn strideq, stridep
 %if CONFIG_VP9_HIGHBITDEPTH
   mova            m0,        [inputq +  0]
   packssdw        m0,        [inputq + 16]
diff --git a/vpx_dsp/x86/sad4d_sse2.asm b/vpx_dsp/x86/sad4d_sse2.asm
index 3f6e55ce9..faaeba658 100644
--- a/vpx_dsp/x86/sad4d_sse2.asm
+++ b/vpx_dsp/x86/sad4d_sse2.asm
@@ -189,10 +189,10 @@ cglobal sad%1x%2x4d, 4, 7, 8, src, src_stride, ref1, ref_stride, \
 %endif
   movsxdifnidn src_strideq, src_strided
   movsxdifnidn ref_strideq, ref_strided
-  mov                ref2q, [ref1q+gprsize*1]
-  mov                ref3q, [ref1q+gprsize*2]
-  mov                ref4q, [ref1q+gprsize*3]
-  mov                ref1q, [ref1q+gprsize*0]
+  mov                ref2p, [ref1q+ptrsize*1]
+  mov                ref3p, [ref1q+ptrsize*2]
+  mov                ref4p, [ref1q+ptrsize*3]
+  mov                ref1p, [ref1q+ptrsize*0]
 
   PROCESS_%1x2x4 1, 0, 0, src_strideq, ref_strideq, 1
 %rep (%2-4)/2
@@ -209,12 +209,12 @@ cglobal sad%1x%2x4d, 4, 7, 8, src, src_stride, ref1, ref_stride, \
   mova                  m7, m6
   punpcklqdq            m4, m6
   punpckhqdq            m5, m7
-  movifnidn             r4, r4mp
+  movifnidn            r4p, r4mx
   paddd                 m4, m5
   movu                [r4], m4
   RET
 %else
-  movifnidn             r4, r4mp
+  movifnidn            r4p, r4mx
   pshufd            m6, m6, 0x08
   pshufd            m7, m7, 0x08
   movq              [r4+0], m6
diff --git a/vpx_dsp/x86/ssim_opt_x86_64.asm b/vpx_dsp/x86/ssim_opt_x86_64.asm
index 6d58321e0..a296301b0 100644
--- a/vpx_dsp/x86/ssim_opt_x86_64.asm
+++ b/vpx_dsp/x86/ssim_opt_x86_64.asm
@@ -119,11 +119,11 @@ sym(vpx_ssim_parms_16x16_sse2):
     movd            [rdi], xmm15;
     mov             rdi,arg(5)
     movd            [rdi], xmm14;
-    mov             rdi,arg(6)
+    mov             rdip,arg(6)
     movd            [rdi], xmm13;
-    mov             rdi,arg(7)
+    mov             rdip,arg(7)
     movd            [rdi], xmm12;
-    mov             rdi,arg(8)
+    mov             rdip,arg(8)
     movd            [rdi], xmm11;
 
     ; begin epilog
@@ -200,11 +200,11 @@ sym(vpx_ssim_parms_8x8_sse2):
     movd            [rdi], xmm15;
     mov             rdi,arg(5)
     movd            [rdi], xmm14;
-    mov             rdi,arg(6)
+    mov             rdip,arg(6)
     movd            [rdi], xmm13;
-    mov             rdi,arg(7)
+    mov             rdip,arg(7)
     movd            [rdi], xmm12;
-    mov             rdi,arg(8)
+    mov             rdip,arg(8)
     movd            [rdi], xmm11;
 
     ; begin epilog
diff --git a/vpx_dsp/x86/subpel_variance_sse2.asm b/vpx_dsp/x86/subpel_variance_sse2.asm
index cee4468c1..df54b9174 100644
--- a/vpx_dsp/x86/subpel_variance_sse2.asm
+++ b/vpx_dsp/x86/subpel_variance_sse2.asm
@@ -121,12 +121,19 @@ SECTION .text
                                       dst, dst_stride, \
                                       sec, sec_stride, height, sse
     %define sec_str sec_strideq
+    %if ABI_X32
+      mov secp, secp
+      movsxd sec_strideq, sec_stridep
+    %endif
   %else
     cglobal sub_pixel_variance%1xh, 7, 8, 13, src, src_stride, x_offset, \
                                   y_offset, dst, dst_stride, height, sse
   %endif
   %define block_height heightd
   %define bilin_filter sseq
+  %if ABI_X32
+    mov ssep, ssep
+  %endif
 %else
   %if ARCH_X86=1 && CONFIG_PIC=1
     %if %2 == 1 ; avg
@@ -202,6 +209,9 @@ SECTION .text
   %define movx movh
 %endif
 
+  movsxdifnidn src_strideq, src_stridep
+  movsxdifnidn dst_strideq, dst_stridep
+
   ASSERT               %1 <= 16         ; m6 overflows if w > 16
   pxor                 m6, m6           ; sum
   pxor                 m7, m7           ; sse
diff --git a/vpx_dsp/x86/subtract_sse2.asm b/vpx_dsp/x86/subtract_sse2.asm
index 4273efb85..19279b40a 100644
--- a/vpx_dsp/x86/subtract_sse2.asm
+++ b/vpx_dsp/x86/subtract_sse2.asm
@@ -21,6 +21,8 @@ INIT_XMM sse2
 cglobal subtract_block, 7, 7, 8, \
                         rows, cols, diff, diff_stride, src, src_stride, \
                         pred, pred_stride
+  movsxdifnidn diff_strideq, diff_stridep
+  movsxdifnidn  src_strideq, src_stridep
 %define pred_str colsq
   pxor                  m7, m7         ; dedicated zero register
   cmp                colsd, 4
@@ -55,7 +57,7 @@ cglobal subtract_block, 7, 7, 8, \
   mova [diffq+mmsize*1+%6], m1
 %endmacro
 
-  mov             pred_str, pred_stridemp
+  movsxpq         pred_str, pred_stridemx
 .loop_64:
   loop16 0*mmsize, 1*mmsize, 0*mmsize, 1*mmsize, 0*mmsize, 2*mmsize
   loop16 2*mmsize, 3*mmsize, 2*mmsize, 3*mmsize, 4*mmsize, 6*mmsize
@@ -67,7 +69,7 @@ cglobal subtract_block, 7, 7, 8, \
   RET
 
 .case_32:
-  mov             pred_str, pred_stridemp
+  movsxpq         pred_str, pred_stridemx
 .loop_32:
   loop16 0, mmsize, 0, mmsize, 0, 2*mmsize
   lea                diffq, [diffq+diff_strideq*2]
@@ -78,7 +80,7 @@ cglobal subtract_block, 7, 7, 8, \
   RET
 
 .case_16:
-  mov             pred_str, pred_stridemp
+  movsxpq         pred_str, pred_stridemx
 .loop_16:
   loop16 0, src_strideq, 0, pred_str, 0, diff_strideq*2
   lea                diffq, [diffq+diff_strideq*4]
@@ -104,7 +106,7 @@ cglobal subtract_block, 7, 7, 8, \
 %endmacro
 
 .case_8:
-  mov             pred_str, pred_stridemp
+  movsxpq         pred_str, pred_stridemx
 .loop_8:
   loop_h
   lea                diffq, [diffq+diff_strideq*4]
@@ -116,7 +118,7 @@ cglobal subtract_block, 7, 7, 8, \
 
 INIT_MMX
 .case_4:
-  mov             pred_str, pred_stridemp
+  movsxpq         pred_str, pred_stridemx
 .loop_4:
   loop_h
   lea                diffq, [diffq+diff_strideq*4]
diff --git a/vpx_dsp/x86/vpx_convolve_copy_sse2.asm b/vpx_dsp/x86/vpx_convolve_copy_sse2.asm
index e2311c116..3119f677e 100644
--- a/vpx_dsp/x86/vpx_convolve_copy_sse2.asm
+++ b/vpx_dsp/x86/vpx_convolve_copy_sse2.asm
@@ -29,6 +29,8 @@ cglobal convolve_%1, 4, 7, 4+AUX_XMM_REGS, src, src_stride, \
                                            dst, dst_stride, \
                                            fx, fxs, fy, fys, w, h
 %endif
+  movsxdifnidn src_strideq, src_stridep
+  movsxdifnidn dst_strideq, dst_stridep
   mov r4d, dword wm
 %ifidn %2, highbd
   shl r4d, 1
diff --git a/vpx_dsp/x86/vpx_subpixel_8t_ssse3.asm b/vpx_dsp/x86/vpx_subpixel_8t_ssse3.asm
index c1a6f23ab..3b0a236e5 100644
--- a/vpx_dsp/x86/vpx_subpixel_8t_ssse3.asm
+++ b/vpx_dsp/x86/vpx_subpixel_8t_ssse3.asm
@@ -77,6 +77,8 @@ SECTION .text
 %macro SUBPIX_HFILTER4 1
 cglobal filter_block1d4_%1, 6, 6, 11, LOCAL_VARS_SIZE_H4, \
                             src, sstride, dst, dstride, height, filter
+    movsxdifnidn  sstrideq, sstridep
+    movsxdifnidn  dstrideq, dstridep
     mova                m4, [filterq]
     packsswb            m4, m4
 %if ARCH_X86_64
@@ -189,6 +191,8 @@ cglobal filter_block1d4_%1, 6, 6, 11, LOCAL_VARS_SIZE_H4, \
 %macro SUBPIX_HFILTER8 1
 cglobal filter_block1d8_%1, 6, 6, 14, LOCAL_VARS_SIZE, \
                             src, sstride, dst, dstride, height, filter
+    movsxdifnidn  sstrideq, sstridep
+    movsxdifnidn  dstrideq, dstridep
     mova                 m4, [filterq]
     SETUP_LOCAL_VARS
     dec             heightd
@@ -280,6 +284,8 @@ cglobal filter_block1d8_%1, 6, 6, 14, LOCAL_VARS_SIZE, \
 %macro SUBPIX_HFILTER16 1
 cglobal filter_block1d16_%1, 6, 6, 14, LOCAL_VARS_SIZE, \
                              src, sstride, dst, dstride, height, filter
+    movsxdifnidn  sstrideq, sstridep
+    movsxdifnidn  dstrideq, dstridep
     mova          m4, [filterq]
     SETUP_LOCAL_VARS
 
@@ -348,6 +354,8 @@ SUBPIX_HFILTER4  h8_avg
 %macro SUBPIX_VFILTER 2
 cglobal filter_block1d%2_%1, 6, NUM_GENERAL_REG_USED, 15, LOCAL_VARS_SIZE, \
                              src, sstride, dst, dstride, height, filter
+    movsxdifnidn sstrideq, sstridep
+    movsxdifnidn dstrideq, dstridep
     mova          m4, [filterq]
     SETUP_LOCAL_VARS
 
@@ -578,6 +586,8 @@ cglobal filter_block1d%2_%1, 6, NUM_GENERAL_REG_USED, 15, LOCAL_VARS_SIZE, \
 %macro SUBPIX_VFILTER16 1
 cglobal filter_block1d16_%1, 6, NUM_GENERAL_REG_USED, 16, LOCAL_VARS_SIZE, \
                              src, sstride, dst, dstride, height, filter
+    movsxdifnidn   sstrideq, sstridep
+    movsxdifnidn   dstrideq, dstridep
     mova                     m4, [filterq]
     SETUP_LOCAL_VARS
 
-- 
2.16.4

