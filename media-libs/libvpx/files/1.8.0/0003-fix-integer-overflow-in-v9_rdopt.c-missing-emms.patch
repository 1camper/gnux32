From 6d4ad4b72fd91f3d9cdc766a9e7be7c7e5b085e0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Matthias=20R=C3=A4ncker?= <theonetruecamper@gmx.de>
Date: Sat, 22 Sep 2018 16:56:13 +0200
Subject: [PATCH 3/5] fix integer overflow in v9_rdopt.c (missing emms)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
Change-Id: Iefc4fbcb40ad7c9f58cfc27a1e87499356272cdb
---
 vp9/encoder/vp9_rdopt.c | 82 ++++++++++++++++++++++-------------------
 1 file changed, 44 insertions(+), 38 deletions(-)

diff --git a/vp9/encoder/vp9_rdopt.c b/vp9/encoder/vp9_rdopt.c
index debe88f9d..86f72359a 100644
--- a/vp9/encoder/vp9_rdopt.c
+++ b/vp9/encoder/vp9_rdopt.c
@@ -3086,54 +3086,60 @@ int vp9_internal_image_edge(VP9_COMP *cpi) {
 // In most cases this is the "real" edge unless there are formatting
 // bars embedded in the stream.
 int vp9_active_h_edge(VP9_COMP *cpi, int mi_row, int mi_step) {
-  int top_edge = 0;
-  int bottom_edge = cpi->common.mi_rows;
-  int is_active_h_edge = 0;
-
-  // For two pass account for any formatting bars detected.
-  if (cpi->oxcf.pass == 2) {
-    TWO_PASS *twopass = &cpi->twopass;
-
-    // The inactive region is specified in MBs not mi units.
-    // The image edge is in the following MB row.
-    top_edge += (int)(twopass->this_frame_stats.inactive_zone_rows * 2);
-
-    bottom_edge -= (int)(twopass->this_frame_stats.inactive_zone_rows * 2);
-    bottom_edge = VPXMAX(top_edge, bottom_edge);
-  }
+  vpx_clear_system_state();
+  {
+    int top_edge = 0;
+    int bottom_edge = cpi->common.mi_rows;
+    int is_active_h_edge = 0;
+
+    // For two pass account for any formatting bars detected.
+    if (cpi->oxcf.pass == 2) {
+      TWO_PASS *twopass = &cpi->twopass;
+
+      // The inactive region is specified in MBs not mi units.
+      // The image edge is in the following MB row.
+      top_edge += (int)(twopass->this_frame_stats.inactive_zone_rows * 2);
+
+      bottom_edge -= (int)(twopass->this_frame_stats.inactive_zone_rows * 2);
+      bottom_edge = VPXMAX(top_edge, bottom_edge);
+    }
 
-  if (((top_edge >= mi_row) && (top_edge < (mi_row + mi_step))) ||
-      ((bottom_edge >= mi_row) && (bottom_edge < (mi_row + mi_step)))) {
-    is_active_h_edge = 1;
+    if (((top_edge >= mi_row) && (top_edge < (mi_row + mi_step))) ||
+        ((bottom_edge >= mi_row) && (bottom_edge < (mi_row + mi_step)))) {
+      is_active_h_edge = 1;
+    }
+    return is_active_h_edge;
   }
-  return is_active_h_edge;
 }
 
 // Checks to see if a super block is on a vertical image edge.
 // In most cases this is the "real" edge unless there are formatting
 // bars embedded in the stream.
 int vp9_active_v_edge(VP9_COMP *cpi, int mi_col, int mi_step) {
-  int left_edge = 0;
-  int right_edge = cpi->common.mi_cols;
-  int is_active_v_edge = 0;
-
-  // For two pass account for any formatting bars detected.
-  if (cpi->oxcf.pass == 2) {
-    TWO_PASS *twopass = &cpi->twopass;
-
-    // The inactive region is specified in MBs not mi units.
-    // The image edge is in the following MB row.
-    left_edge += (int)(twopass->this_frame_stats.inactive_zone_cols * 2);
-
-    right_edge -= (int)(twopass->this_frame_stats.inactive_zone_cols * 2);
-    right_edge = VPXMAX(left_edge, right_edge);
-  }
+  vpx_clear_system_state();
+  {
+    int left_edge = 0;
+    int right_edge = cpi->common.mi_cols;
+    int is_active_v_edge = 0;
+
+    // For two pass account for any formatting bars detected.
+    if (cpi->oxcf.pass == 2) {
+      TWO_PASS *twopass = &cpi->twopass;
+
+      // The inactive region is specified in MBs not mi units.
+      // The image edge is in the following MB row.
+      left_edge += (int)(twopass->this_frame_stats.inactive_zone_cols * 2);
+
+      right_edge -= (int)(twopass->this_frame_stats.inactive_zone_cols * 2);
+      right_edge = VPXMAX(left_edge, right_edge);
+    }
 
-  if (((left_edge >= mi_col) && (left_edge < (mi_col + mi_step))) ||
-      ((right_edge >= mi_col) && (right_edge < (mi_col + mi_step)))) {
-    is_active_v_edge = 1;
+    if (((left_edge >= mi_col) && (left_edge < (mi_col + mi_step))) ||
+        ((right_edge >= mi_col) && (right_edge < (mi_col + mi_step)))) {
+      is_active_v_edge = 1;
+    }
+    return is_active_v_edge;
   }
-  return is_active_v_edge;
 }
 
 // Checks to see if a super block is at the edge of the active image.
-- 
2.21.0

