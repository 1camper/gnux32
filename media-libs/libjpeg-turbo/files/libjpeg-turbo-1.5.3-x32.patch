From d4791c9563dca2b2650db35ceaec047c95054b71 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Matthias=20R=C3=A4ncker?= <theonetruecamper@gmx.de>
Date: Wed, 29 Aug 2018 22:10:28 +0200
Subject: [PATCH] add x32 support
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
---
 acinclude.m4              |  4 ++++
 jchuff.c                  | 12 +++++++++---
 jdhuff.c                  |  2 +-
 jdhuff.h                  |  5 +++++
 simd/jccolext-sse2-64.asm | 14 +++++++-------
 simd/jcgryext-sse2-64.asm |  6 +++---
 simd/jchuff-sse2-64.asm   |  8 ++++----
 simd/jcsample-sse2-64.asm | 14 +++++++-------
 simd/jdcolext-sse2-64.asm | 14 +++++++-------
 simd/jdmrgext-sse2-64.asm | 46 ++++++++++++++++++++++++----------------------
 simd/jdsample-sse2-64.asm | 32 ++++++++++++++++----------------
 simd/jidctflt-sse2-64.asm |  8 ++++----
 simd/jidctfst-sse2-64.asm | 16 ++++++++--------
 simd/jidctint-sse2-64.asm | 16 ++++++++--------
 simd/jidctred-sse2-64.asm | 12 ++++++------
 simd/jquantf-sse2-64.asm  |  4 ++--
 simd/jquanti-sse2-64.asm  |  8 ++++----
 simd/jsimdext.inc         | 42 +++++++++++++++++++++++++++++++++++++++++-
 simd/nasm_lt.sh           |  2 +-
 19 files changed, 161 insertions(+), 104 deletions(-)

diff --git a/acinclude.m4 b/acinclude.m4
index 113169f..32bb384 100644
--- a/acinclude.m4
+++ b/acinclude.m4
@@ -33,6 +33,9 @@ case "$host_os" in
   linux*aout*)
     objfmt='a.out'
   ;;
+  linux*x32)
+    objfmt='ELFX32'
+  ;;
   linux*)
     case "$host_cpu" in
       x86_64)
@@ -97,6 +100,7 @@ case "$objfmt" in
   a.out)      NAFLAGS='-faout -DAOUT';;
   BSD-a.out)  NAFLAGS='-faoutb -DAOUT';;
   ELF)        NAFLAGS='-felf -DELF';;
+  ELFX32)     NAFLAGS='-felfx32 -DELF -D__x86_64__';;
   ELF64)      NAFLAGS='-felf64 -DELF -D__x86_64__';;
   RDF)        NAFLAGS='-frdf -DRDF';;
   Mach-O)     NAFLAGS='-fmacho -DMACHO';;
diff --git a/jchuff.c b/jchuff.c
index fffaace..0b4c7cc 100644
--- a/jchuff.c
+++ b/jchuff.c
@@ -66,8 +66,14 @@
  * but must not be updated permanently until we complete the MCU.
  */
 
+#if defined (__x86_64__) && defined(__ILP32__)
+typedef unsigned long long bit_buf_type;
+#else
+typedef size_t bit_buf_type;
+#endif
+
 typedef struct {
-  size_t put_buffer;            /* current bit-accumulation buffer */
+  bit_buf_type put_buffer;      /* current bit-accumulation buffer */
   int put_bits;                 /* # of bits now in it */
   int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
 } savable_state;
@@ -387,7 +393,7 @@ dump_buffer (working_state *state)
 #error Cannot determine word size
 #endif
 
-#if SIZEOF_SIZE_T==8 || defined(_WIN64)
+#if SIZEOF_SIZE_T==8 || defined(_WIN64) || (defined(__x86_64__) && defined(__ILP32__))
 
 #define EMIT_BITS(code, size) { \
   CHECKBUF47() \
@@ -464,7 +470,7 @@ LOCAL(boolean)
 flush_bits (working_state *state)
 {
   JOCTET _buffer[BUFSIZE], *buffer;
-  size_t put_buffer;  int put_bits;
+  bit_buf_type put_buffer;  int put_bits;
   size_t bytes, bytestocopy;  int localbuf = 0;
 
   put_buffer = state->cur.put_buffer;
diff --git a/jdhuff.c b/jdhuff.c
index bb2b848..e12497b 100644
--- a/jdhuff.c
+++ b/jdhuff.c
@@ -421,7 +421,7 @@ jpeg_fill_bit_buffer (bitread_working_state *state,
   } \
 }
 
-#if SIZEOF_SIZE_T==8 || defined(_WIN64)
+#if SIZEOF_SIZE_T==8 || defined(_WIN64) || (defined(__x86_64) && defined(__ILP32__))
 
 /* Pre-fetch 48 bytes, because the holding register is 64-bit */
 #define FILL_BIT_BUFFER_FAST \
diff --git a/jdhuff.h b/jdhuff.h
index 87d4465..8f33f48 100644
--- a/jdhuff.h
+++ b/jdhuff.h
@@ -79,6 +79,11 @@ EXTERN(void) jpeg_make_d_derived_tbl
 typedef size_t bit_buf_type;            /* type of bit-extraction buffer */
 #define BIT_BUF_SIZE  64                /* size of buffer in bits */
 
+#elif defined (__x86_64__) && defined(__ILP32__)
+
+typedef unsigned long long bit_buf_type;/* type of bit-extraction buffer */
+#define BIT_BUF_SIZE  64                /* size of buffer in bits */
+
 #else
 
 typedef unsigned long bit_buf_type;     /* type of bit-extraction buffer */
diff --git a/simd/jccolext-sse2-64.asm b/simd/jccolext-sse2-64.asm
index 8e4642d..57eeaf8 100644
--- a/simd/jccolext-sse2-64.asm
+++ b/simd/jccolext-sse2-64.asm
@@ -59,9 +59,9 @@ EXTN(jsimd_rgb_ycc_convert_sse2):
 
         mov rsi, r12
         mov ecx, r13d
-        mov     rdi, JSAMPARRAY [rsi+0*SIZEOF_JSAMPARRAY]
-        mov     rbx, JSAMPARRAY [rsi+1*SIZEOF_JSAMPARRAY]
-        mov     rdx, JSAMPARRAY [rsi+2*SIZEOF_JSAMPARRAY]
+        mov     rdip, JSAMPARRAY [rsi+0*SIZEOF_JSAMPARRAY]
+        mov     rbxp, JSAMPARRAY [rsi+1*SIZEOF_JSAMPARRAY]
+        mov     rdxp, JSAMPARRAY [rsi+2*SIZEOF_JSAMPARRAY]
         lea     rdi, [rdi+rcx*SIZEOF_JSAMPROW]
         lea     rbx, [rbx+rcx*SIZEOF_JSAMPROW]
         lea     rdx, [rdx+rcx*SIZEOF_JSAMPROW]
@@ -79,10 +79,10 @@ EXTN(jsimd_rgb_ycc_convert_sse2):
         push    rsi
         push    rcx                     ; col
 
-        mov     rsi, JSAMPROW [rsi]     ; inptr
-        mov     rdi, JSAMPROW [rdi]     ; outptr0
-        mov     rbx, JSAMPROW [rbx]     ; outptr1
-        mov     rdx, JSAMPROW [rdx]     ; outptr2
+        mov     rsip, JSAMPROW [rsi]    ; inptr
+        mov     rdip, JSAMPROW [rdi]    ; outptr0
+        mov     rbxp, JSAMPROW [rbx]    ; outptr1
+        mov     rdxp, JSAMPROW [rdx]    ; outptr2
 
         cmp     rcx, byte SIZEOF_XMMWORD
         jae     near .columnloop
diff --git a/simd/jcgryext-sse2-64.asm b/simd/jcgryext-sse2-64.asm
index 541355a..28dcc89 100644
--- a/simd/jcgryext-sse2-64.asm
+++ b/simd/jcgryext-sse2-64.asm
@@ -59,7 +59,7 @@ EXTN(jsimd_rgb_gray_convert_sse2):
 
         mov rsi, r12
         mov ecx, r13d
-        mov     rdi, JSAMPARRAY [rsi+0*SIZEOF_JSAMPARRAY]
+        mov     rdip, JSAMPARRAY [rsi+0*SIZEOF_JSAMPARRAY]
         lea     rdi, [rdi+rcx*SIZEOF_JSAMPROW]
 
         pop     rcx
@@ -73,8 +73,8 @@ EXTN(jsimd_rgb_gray_convert_sse2):
         push    rsi
         push    rcx                     ; col
 
-        mov     rsi, JSAMPROW [rsi]     ; inptr
-        mov     rdi, JSAMPROW [rdi]     ; outptr0
+        mov     rsip, JSAMPROW [rsi]    ; inptr
+        mov     rdip, JSAMPROW [rdi]    ; outptr0
 
         cmp     rcx, byte SIZEOF_XMMWORD
         jae     near .columnloop
diff --git a/simd/jchuff-sse2-64.asm b/simd/jchuff-sse2-64.asm
index b1144d1..e1210f5 100644
--- a/simd/jchuff-sse2-64.asm
+++ b/simd/jchuff-sse2-64.asm
@@ -205,8 +205,8 @@ EXTN(jsimd_huff_encode_one_block_sse2):
 
         mov buffer, r11  ; r11 is now sratch
 
-        mov put_buffer, MMWORD [r10+16]  ; put_buffer = state->cur.put_buffer;
-        mov put_bits,    DWORD [r10+24]  ; put_bits = state->cur.put_bits;
+        mov put_buffer, QWORD [r10+SIZEOF_POINTER*2]    ; put_buffer = state->cur.put_buffer;
+        mov put_bits,   DWORD [r10+SIZEOF_POINTER*2+8]  ; put_bits = state->cur.put_bits;
         push r10  ; r10 is now scratch
 
         ; Encode the DC coefficient difference per section F.1.2.1
@@ -338,8 +338,8 @@ EXTN(jsimd_huff_encode_one_block_sse2):
 .EFN:
         pop r10
         ; Save put_buffer & put_bits
-        mov MMWORD [r10+16], put_buffer  ; state->cur.put_buffer = put_buffer;
-        mov DWORD  [r10+24], put_bits  ; state->cur.put_bits = put_bits;
+        mov QWORD [r10+SIZEOF_POINTER*2], put_buffer  ; state->cur.put_buffer = put_buffer;
+        mov DWORD [r10+SIZEOF_POINTER*2+8], put_bits  ; state->cur.put_bits = put_bits;
 
         pop rbx
 %ifdef WIN64
diff --git a/simd/jcsample-sse2-64.asm b/simd/jcsample-sse2-64.asm
index 40ee15f..057bf03 100644
--- a/simd/jcsample-sse2-64.asm
+++ b/simd/jcsample-sse2-64.asm
@@ -71,7 +71,7 @@ EXTN(jsimd_h2v1_downsample_sse2):
         push    rax
         push    rcx
 
-        mov     rdi, JSAMPROW [rsi]
+        mov     rdip, JSAMPROW [rsi]
         add     rdi,rdx
         mov     al, JSAMPLE [rdi-1]
 
@@ -106,8 +106,8 @@ EXTN(jsimd_h2v1_downsample_sse2):
         push    rdi
         push    rsi
 
-        mov     rsi, JSAMPROW [rsi]             ; inptr
-        mov rdi, JSAMPROW [rdi]         ; outptr
+        mov     rsip, JSAMPROW [rsi]         ; inptr
+        mov     rdip, JSAMPROW [rdi]         ; outptr
 
         cmp     rcx, byte SIZEOF_XMMWORD
         jae     short .columnloop
@@ -215,7 +215,7 @@ EXTN(jsimd_h2v2_downsample_sse2):
         push    rax
         push    rcx
 
-        mov     rdi, JSAMPROW [rsi]
+        mov     rdip, JSAMPROW [rsi]
         add     rdi,rdx
         mov     al, JSAMPLE [rdi-1]
 
@@ -250,9 +250,9 @@ EXTN(jsimd_h2v2_downsample_sse2):
         push    rdi
         push    rsi
 
-        mov     rdx, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; inptr0
-        mov     rsi, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]   ; inptr1
-        mov     rdi, JSAMPROW [rdi]                     ; outptr
+        mov     rdxp, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; inptr0
+        mov     rsip, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]   ; inptr1
+        mov     rdip, JSAMPROW [rdi]                     ; outptr
 
         cmp     rcx, byte SIZEOF_XMMWORD
         jae     short .columnloop
diff --git a/simd/jdcolext-sse2-64.asm b/simd/jdcolext-sse2-64.asm
index 4634066..68c6880 100644
--- a/simd/jdcolext-sse2-64.asm
+++ b/simd/jdcolext-sse2-64.asm
@@ -59,9 +59,9 @@ EXTN(jsimd_ycc_rgb_convert_sse2):
 
         mov     rdi, r11
         mov     ecx, r12d
-        mov     rsi, JSAMPARRAY [rdi+0*SIZEOF_JSAMPARRAY]
-        mov     rbx, JSAMPARRAY [rdi+1*SIZEOF_JSAMPARRAY]
-        mov     rdx, JSAMPARRAY [rdi+2*SIZEOF_JSAMPARRAY]
+        mov     rsip, JSAMPARRAY [rdi+0*SIZEOF_JSAMPARRAY]
+        mov     rbxp, JSAMPARRAY [rdi+1*SIZEOF_JSAMPARRAY]
+        mov     rdxp, JSAMPARRAY [rdi+2*SIZEOF_JSAMPARRAY]
         lea     rsi, [rsi+rcx*SIZEOF_JSAMPROW]
         lea     rbx, [rbx+rcx*SIZEOF_JSAMPROW]
         lea     rdx, [rdx+rcx*SIZEOF_JSAMPROW]
@@ -80,10 +80,10 @@ EXTN(jsimd_ycc_rgb_convert_sse2):
         push    rsi
         push    rcx                     ; col
 
-        mov     rsi, JSAMPROW [rsi]     ; inptr0
-        mov     rbx, JSAMPROW [rbx]     ; inptr1
-        mov     rdx, JSAMPROW [rdx]     ; inptr2
-        mov     rdi, JSAMPROW [rdi]     ; outptr
+        mov     rsip, JSAMPROW [rsi]    ; inptr0
+        mov     rbxp, JSAMPROW [rbx]    ; inptr1
+        mov     rdxp, JSAMPROW [rdx]    ; inptr2
+        mov     rdip, JSAMPROW [rdi]    ; outptr
 .columnloop:
 
         movdqa  xmm5, XMMWORD [rbx]     ; xmm5=Cb(0123456789ABCDEF)
diff --git a/simd/jdmrgext-sse2-64.asm b/simd/jdmrgext-sse2-64.asm
index ad74c5f..40069e3 100644
--- a/simd/jdmrgext-sse2-64.asm
+++ b/simd/jdmrgext-sse2-64.asm
@@ -59,14 +59,14 @@ EXTN(jsimd_h2v1_merged_upsample_sse2):
 
         mov     rdi, r11
         mov     ecx, r12d
-        mov     rsi, JSAMPARRAY [rdi+0*SIZEOF_JSAMPARRAY]
-        mov     rbx, JSAMPARRAY [rdi+1*SIZEOF_JSAMPARRAY]
-        mov     rdx, JSAMPARRAY [rdi+2*SIZEOF_JSAMPARRAY]
+        mov     rsip, JSAMPARRAY [rdi+0*SIZEOF_JSAMPARRAY]
+        mov     rbxp, JSAMPARRAY [rdi+1*SIZEOF_JSAMPARRAY]
+        mov     rdxp, JSAMPARRAY [rdi+2*SIZEOF_JSAMPARRAY]
         mov     rdi, r13
-        mov     rsi, JSAMPROW [rsi+rcx*SIZEOF_JSAMPROW]         ; inptr0
-        mov     rbx, JSAMPROW [rbx+rcx*SIZEOF_JSAMPROW]         ; inptr1
-        mov     rdx, JSAMPROW [rdx+rcx*SIZEOF_JSAMPROW]         ; inptr2
-        mov     rdi, JSAMPROW [rdi]                             ; outptr
+        mov     rsip, JSAMPROW [rsi+rcx*SIZEOF_JSAMPROW]         ; inptr0
+        mov     rbxp, JSAMPROW [rbx+rcx*SIZEOF_JSAMPROW]         ; inptr1
+        mov     rdxp, JSAMPROW [rdx+rcx*SIZEOF_JSAMPROW]         ; inptr2
+        mov     rdip, JSAMPROW [rdi]                             ; outptr
 
         pop     rcx                     ; col
 
@@ -458,15 +458,16 @@ EXTN(jsimd_h2v2_merged_upsample_sse2):
 
         mov     rdi, r11
         mov     ecx, r12d
-        mov     rsi, JSAMPARRAY [rdi+0*SIZEOF_JSAMPARRAY]
-        mov     rbx, JSAMPARRAY [rdi+1*SIZEOF_JSAMPARRAY]
-        mov     rdx, JSAMPARRAY [rdi+2*SIZEOF_JSAMPARRAY]
+        mov     rsip, JSAMPARRAY [rdi+0*SIZEOF_JSAMPARRAY]
+        mov     rbxp, JSAMPARRAY [rdi+1*SIZEOF_JSAMPARRAY]
+        mov     rdxp, JSAMPARRAY [rdi+2*SIZEOF_JSAMPARRAY]
         mov     rdi, r13
         lea     rsi, [rsi+rcx*SIZEOF_JSAMPROW]
 
-        push    rdx                     ; inptr2
-        push    rbx                     ; inptr1
-        push    rsi                     ; inptr00
+        sub     rsp, SIZEOF_JSAMPARRAY*4
+        mov     JSAMPARRAY [rsp+0*SIZEOF_JSAMPARRAY], rsip  ; intpr00
+        mov     JSAMPARRAY [rsp+1*SIZEOF_JSAMPARRAY], rbxp  ; intpr1
+        mov     JSAMPARRAY [rsp+2*SIZEOF_JSAMPARRAY], rdxp  ; intpr2
         mov     rbx,rsp
 
         push    rdi
@@ -490,16 +491,16 @@ EXTN(jsimd_h2v2_merged_upsample_sse2):
         pop rax
         pop rcx
         pop rdi
-        pop rsi
-        pop rbx
-        pop rdx
+        mov rsip, JSAMPARRAY [rsp+0*SIZEOF_JSAMPARRAY]
+        mov rbxp, JSAMPARRAY [rsp+1*SIZEOF_JSAMPARRAY]
+        mov rdxp, JSAMPARRAY [rsp+2*SIZEOF_JSAMPARRAY]
 
         add     rdi, byte SIZEOF_JSAMPROW       ; outptr1
         add     rsi, byte SIZEOF_JSAMPROW       ; inptr01
 
-        push    rdx                     ; inptr2
-        push    rbx                     ; inptr1
-        push    rsi                     ; inptr00
+        mov     JSAMPARRAY [rsp+0*SIZEOF_JSAMPARRAY], rsip
+        mov     JSAMPARRAY [rsp+1*SIZEOF_JSAMPARRAY], rbxp
+        mov     JSAMPARRAY [rsp+2*SIZEOF_JSAMPARRAY], rdxp
         mov     rbx,rsp
 
         push    rdi
@@ -523,9 +524,10 @@ EXTN(jsimd_h2v2_merged_upsample_sse2):
         pop rax
         pop rcx
         pop rdi
-        pop rsi
-        pop rbx
-        pop rdx
+        mov rsip, JSAMPARRAY [rsp+0*SIZEOF_JSAMPARRAY]
+        mov rbxp, JSAMPARRAY [rsp+1*SIZEOF_JSAMPARRAY]
+        mov rdxp, JSAMPARRAY [rsp+2*SIZEOF_JSAMPARRAY]
+        add rsp, SIZEOF_JSAMPARRAY*4
 
         pop     rbx
         uncollect_args
diff --git a/simd/jdsample-sse2-64.asm b/simd/jdsample-sse2-64.asm
index 1faaed6..b352a12 100644
--- a/simd/jdsample-sse2-64.asm
+++ b/simd/jdsample-sse2-64.asm
@@ -76,14 +76,14 @@ EXTN(jsimd_h2v1_fancy_upsample_sse2):
 
         mov     rsi, r12        ; input_data
         mov     rdi, r13
-        mov     rdi, JSAMPARRAY [rdi]                   ; output_data
+        mov     rdip, JSAMPARRAY [rdi]                  ; output_data
 .rowloop:
         push    rax                     ; colctr
         push    rdi
         push    rsi
 
-        mov     rsi, JSAMPROW [rsi]     ; inptr
-        mov     rdi, JSAMPROW [rdi]     ; outptr
+        mov     rsip, JSAMPROW [rsi]    ; inptr
+        mov     rdip, JSAMPROW [rdi]    ; outptr
 
         test    rax, SIZEOF_XMMWORD-1
         jz      short .skip
@@ -223,18 +223,18 @@ EXTN(jsimd_h2v2_fancy_upsample_sse2):
 
         mov     rsi, r12        ; input_data
         mov     rdi, r13
-        mov     rdi, JSAMPARRAY [rdi]                   ; output_data
+        mov     rdip, JSAMPARRAY [rdi]                  ; output_data
 .rowloop:
         push    rax                                     ; colctr
         push    rcx
         push    rdi
         push    rsi
 
-        mov     rcx, JSAMPROW [rsi-1*SIZEOF_JSAMPROW]   ; inptr1(above)
-        mov     rbx, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; inptr0
-        mov     rsi, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]   ; inptr1(below)
-        mov     rdx, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]   ; outptr0
-        mov     rdi, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]   ; outptr1
+        mov     rcxp, JSAMPROW [rsi-1*SIZEOF_JSAMPROW]  ; inptr1(above)
+        mov     rbxp, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]  ; inptr0
+        mov     rsip, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]  ; inptr1(below)
+        mov     rdxp, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]  ; outptr0
+        mov     rdip, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]  ; outptr1
 
         test    rax, SIZEOF_XMMWORD-1
         jz      short .skip
@@ -516,13 +516,13 @@ EXTN(jsimd_h2v1_upsample_sse2):
 
         mov     rsi, r12 ; input_data
         mov     rdi, r13
-        mov     rdi, JSAMPARRAY [rdi]                   ; output_data
+        mov     rdip, JSAMPARRAY [rdi]                   ; output_data
 .rowloop:
         push    rdi
         push    rsi
 
-        mov     rsi, JSAMPROW [rsi]             ; inptr
-        mov     rdi, JSAMPROW [rdi]             ; outptr
+        mov     rsip, JSAMPROW [rsi]            ; inptr
+        mov     rdip, JSAMPROW [rdi]            ; outptr
         mov     rax,rdx                         ; colctr
 .columnloop:
 
@@ -606,14 +606,14 @@ EXTN(jsimd_h2v2_upsample_sse2):
 
         mov     rsi, r12        ; input_data
         mov     rdi, r13
-        mov     rdi, JSAMPARRAY [rdi]                   ; output_data
+        mov     rdip, JSAMPARRAY [rdi]                 ; output_data
 .rowloop:
         push    rdi
         push    rsi
 
-        mov     rsi, JSAMPROW [rsi]                     ; inptr
-        mov     rbx, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]   ; outptr0
-        mov     rdi, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]   ; outptr1
+        mov     rsip, JSAMPROW [rsi]                    ; inptr
+        mov     rbxp, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]  ; outptr0
+        mov     rdip, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]  ; outptr1
         mov     rax,rdx                                 ; colctr
 .columnloop:
 
diff --git a/simd/jidctflt-sse2-64.asm b/simd/jidctflt-sse2-64.asm
index bdda05d..ce68980 100644
--- a/simd/jidctflt-sse2-64.asm
+++ b/simd/jidctflt-sse2-64.asm
@@ -456,12 +456,12 @@ EXTN(jsimd_idct_float_sse2):
         pshufd  xmm5,xmm6,0x4E  ; xmm5=(10 11 12 13 14 15 16 17 00 01 02 03 04 05 06 07)
         pshufd  xmm3,xmm7,0x4E  ; xmm3=(30 31 32 33 34 35 36 37 20 21 22 23 24 25 26 27)
 
-        mov     rdx, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
-        mov     rbx, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
+        mov     rdxp, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
+        mov     rbxp, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm6
         movq    XMM_MMWORD [rbx+rax*SIZEOF_JSAMPLE], xmm7
-        mov     rdx, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
-        mov     rbx, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
+        mov     rdxp, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
+        mov     rbxp, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm5
         movq    XMM_MMWORD [rbx+rax*SIZEOF_JSAMPLE], xmm3
 
diff --git a/simd/jidctfst-sse2-64.asm b/simd/jidctfst-sse2-64.asm
index 4884642..bb01b5f 100644
--- a/simd/jidctfst-sse2-64.asm
+++ b/simd/jidctfst-sse2-64.asm
@@ -461,21 +461,21 @@ EXTN(jsimd_idct_ifast_sse2):
         pshufd  xmm6,xmm4,0x4E  ; xmm6=(50 51 52 53 54 55 56 57 40 41 42 43 44 45 46 47)
         pshufd  xmm2,xmm7,0x4E  ; xmm2=(70 71 72 73 74 75 76 77 60 61 62 63 64 65 66 67)
 
-        mov     rdx, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
+        mov     rdxp, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
+        mov     rsip, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm1
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm3
-        mov     rdx, JSAMPROW [rdi+4*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+6*SIZEOF_JSAMPROW]
+        mov     rdxp, JSAMPROW [rdi+4*SIZEOF_JSAMPROW]
+        mov     rsip, JSAMPROW [rdi+6*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm4
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm7
 
-        mov     rdx, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
+        mov     rdxp, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
+        mov     rsip, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm5
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm0
-        mov     rdx, JSAMPROW [rdi+5*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+7*SIZEOF_JSAMPROW]
+        mov     rdxp, JSAMPROW [rdi+5*SIZEOF_JSAMPROW]
+        mov     rsip, JSAMPROW [rdi+7*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm6
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm2
 
diff --git a/simd/jidctint-sse2-64.asm b/simd/jidctint-sse2-64.asm
index afe1d6a..b41db26 100644
--- a/simd/jidctint-sse2-64.asm
+++ b/simd/jidctint-sse2-64.asm
@@ -818,21 +818,21 @@ EXTN(jsimd_idct_islow_sse2):
         pshufd  xmm2,xmm4,0x4E  ; xmm2=(50 51 52 53 54 55 56 57 40 41 42 43 44 45 46 47)
         pshufd  xmm5,xmm3,0x4E  ; xmm5=(70 71 72 73 74 75 76 77 60 61 62 63 64 65 66 67)
 
-        mov     rdx, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
+        mov     rdxp, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
+        mov     rsip, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm7
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm1
-        mov     rdx, JSAMPROW [rdi+4*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+6*SIZEOF_JSAMPROW]
+        mov     rdxp, JSAMPROW [rdi+4*SIZEOF_JSAMPROW]
+        mov     rsip, JSAMPROW [rdi+6*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm4
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm3
 
-        mov     rdx, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
+        mov     rdxp, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
+        mov     rsip, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm6
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm0
-        mov     rdx, JSAMPROW [rdi+5*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+7*SIZEOF_JSAMPROW]
+        mov     rdxp, JSAMPROW [rdi+5*SIZEOF_JSAMPROW]
+        mov     rsip, JSAMPROW [rdi+7*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm2
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm5
 
diff --git a/simd/jidctred-sse2-64.asm b/simd/jidctred-sse2-64.asm
index a54bbe2..1b5ff92 100644
--- a/simd/jidctred-sse2-64.asm
+++ b/simd/jidctred-sse2-64.asm
@@ -380,12 +380,12 @@ EXTN(jsimd_idct_4x4_sse2):
         pshufd    xmm1,xmm4,0x4E        ; xmm1=(20 21 22 23 30 31 32 33 00 ..)
         pshufd    xmm3,xmm4,0x93        ; xmm3=(30 31 32 33 00 01 02 03 10 ..)
 
-        mov     rdx, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
+        mov     rdxp, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
+        mov     rsip, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
         movd    XMM_DWORD [rdx+rax*SIZEOF_JSAMPLE], xmm4
         movd    XMM_DWORD [rsi+rax*SIZEOF_JSAMPLE], xmm2
-        mov     rdx, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
+        mov     rdxp, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
+        mov     rsip, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
         movd    XMM_DWORD [rdx+rax*SIZEOF_JSAMPLE], xmm1
         movd    XMM_DWORD [rsi+rax*SIZEOF_JSAMPLE], xmm3
 
@@ -560,8 +560,8 @@ EXTN(jsimd_idct_2x2_sse2):
         pextrw  ebx,xmm6,0x00           ; ebx=(C0 D0 -- --)
         pextrw  ecx,xmm6,0x01           ; ecx=(C1 D1 -- --)
 
-        mov     rdx, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
+        mov     rdxp, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
+        mov     rsip, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
         mov     WORD [rdx+rax*SIZEOF_JSAMPLE], bx
         mov     WORD [rsi+rax*SIZEOF_JSAMPLE], cx
 
diff --git a/simd/jquantf-sse2-64.asm b/simd/jquantf-sse2-64.asm
index ef5c1f9..4159a74 100644
--- a/simd/jquantf-sse2-64.asm
+++ b/simd/jquantf-sse2-64.asm
@@ -53,8 +53,8 @@ EXTN(jsimd_convsamp_float_sse2):
         mov rdi, r12
         mov     rcx, DCTSIZE/2
 .convloop:
-        mov     rbx, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
-        mov rdx, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]       ; (JSAMPLE *)
+        mov     rbxp, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
+        mov     rdxp, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
 
         movq    xmm0, XMM_MMWORD [rbx+rax*SIZEOF_JSAMPLE]
         movq    xmm1, XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE]
diff --git a/simd/jquanti-sse2-64.asm b/simd/jquanti-sse2-64.asm
index 66c4e51..1284bd2 100644
--- a/simd/jquanti-sse2-64.asm
+++ b/simd/jquanti-sse2-64.asm
@@ -53,14 +53,14 @@ EXTN(jsimd_convsamp_sse2):
         mov rdi, r12
         mov     rcx, DCTSIZE/4
 .convloop:
-        mov     rbx, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
-        mov rdx, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]       ; (JSAMPLE *)
+        mov     rbxp, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
+        mov     rdxp, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
 
         movq    xmm0, XMM_MMWORD [rbx+rax*SIZEOF_JSAMPLE]       ; xmm0=(01234567)
         movq    xmm1, XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE]       ; xmm1=(89ABCDEF)
 
-        mov     rbx, JSAMPROW [rsi+2*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
-        mov     rdx, JSAMPROW [rsi+3*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
+        mov     rbxp, JSAMPROW [rsi+2*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
+        mov     rdxp, JSAMPROW [rsi+3*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
 
         movq    xmm2, XMM_MMWORD [rbx+rax*SIZEOF_JSAMPLE]       ; xmm2=(GHIJKLMN)
         movq    xmm3, XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE]       ; xmm3=(OPQRSTUV)
diff --git a/simd/jsimdext.inc b/simd/jsimdext.inc
index f28db60..9a83c20 100644
--- a/simd/jsimdext.inc
+++ b/simd/jsimdext.inc
@@ -125,19 +125,59 @@ section .note.GNU-stack noalloc noexec nowrite progbits
 
 %endif  ; ----------------------------------------------
 
+; x86_64 ILP32 ABI (x32)
+%ifidn __OUTPUT_FORMAT__,elfx32
+%define ABI_X32 1
+%endif
+
 ; ==========================================================================
 
 ; --------------------------------------------------------------------------
 ;  Common types
 ;
 %ifdef __x86_64__
+%ifndef ABI_X32
 %define POINTER                 qword           ; general pointer type
 %define SIZEOF_POINTER          SIZEOF_QWORD    ; sizeof(POINTER)
 %define POINTER_BIT             QWORD_BIT       ; sizeof(POINTER)*BYTE_BIT
-%else
+%define raxp                    rax
+%define rbxp                    rbx
+%define rcxp                    rcx
+%define rdxp                    rdx
+%define rsip                    rsi
+%define rdip                    rdi
+%define rbpp                    rbp
+%define rspp                    rsp
+%define r8p                     r8
+%define r9p                     r9
+%define r10p                    r10
+%define r11p                    r11
+%define r12p                    r12
+%define r13p                    r13
+%define r14p                    r14
+%define r15p                    r15
+%endif
+%endif
+%ifndef raxp
 %define POINTER                 dword           ; general pointer type
 %define SIZEOF_POINTER          SIZEOF_DWORD    ; sizeof(POINTER)
 %define POINTER_BIT             DWORD_BIT       ; sizeof(POINTER)*BYTE_BIT
+%define raxp                    eax
+%define rbxp                    ebx
+%define rcxp                    ecx
+%define rdxp                    edx
+%define rsip                    esi
+%define rdip                    edi
+%define rbpp                    ebp
+%define rspp                    esp
+%define r8p                     r8d
+%define r9p                     r9d
+%define r10p                    r10d
+%define r11p                    r11d
+%define r12p                    r12d
+%define r13p                    r13d
+%define r14p                    r14d
+%define r15p                    r15d
 %endif
 
 %define INT                     dword           ; signed integer type
diff --git a/simd/nasm_lt.sh b/simd/nasm_lt.sh
index 817be16..6bbebbb 100755
--- a/simd/nasm_lt.sh
+++ b/simd/nasm_lt.sh
@@ -14,7 +14,7 @@ while [ $# -gt 0 ]; do
                 pic=yes
             fi
             ;;
-        -f|-fbin|-faout|-faoutb|-fcoff|-felf|-felf64|-fas86| \
+        -f|-fbin|-faout|-faoutb|-fcoff|-felf|-felfx32|-felf64|-fas86| \
         -fobj|-fwin32|-fwin64|-frdf|-fieee|-fmacho|-fmacho64)
             # it's a file format specifier for nasm.
             command="$command $1"
-- 
2.16.4

