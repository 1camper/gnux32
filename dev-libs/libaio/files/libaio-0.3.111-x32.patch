x32: use correct syscall nums and properly load syscall arguments

Signed-off-by: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
2019/08/17
--- a/src/syscall-x86_x32.h
+++ b/src/syscall-x86_x32.h
@@ -0,0 +1,23 @@
+#ifndef __X32_SYSCALL_BIT
+#define __X32_SYSCALL_BIT	0x40000000
+#endif
+#ifndef __NR_io_setup
+#define __NR_io_setup		(__X32_SYSCALL_BIT + 543)
+#endif
+#ifndef __NR_io_destroy
+#define __NR_io_destroy		(__X32_SYSCALL_BIT + 207)
+#endif
+#ifndef __NR_io_getevents
+#define __NR_io_getevents	(__X32_SYSCALL_BIT + 208)
+#endif
+#ifndef __NR_io_submit
+#define __NR_io_submit		(__X32_SYSCALL_BIT + 544)
+#endif
+#ifndef __NR_io_cancel
+#define __NR_io_cancel		(__X32_SYSCALL_BIT + 210)
+#endif
+
+#undef __syscall_arg
+#define __syscall_arg(x) (__extension__(				\
+	  (long long)__builtin_choose_expr(				\
+	    __builtin_classify_type(x) == 5, (unsigned long)(x),(x))))
--- a/src/syscall.h
+++ b/src/syscall.h
@@ -11,8 +11,11 @@
 #define DEFSYMVER(compat_sym, orig_sym, ver_sym)	\
 	__asm__(".symver " SYMSTR(compat_sym) "," SYMSTR(orig_sym) "@@LIBAIO_" SYMSTR(ver_sym));
 
+#define __syscall_arg(x) (long)(x)
 #if defined(__i386__)
 #include "syscall-i386.h"
+#elif defined(__x86_64__) && defined(__ILP32__)
+#include "syscall-x86_x32.h"
 #elif defined(__x86_64__)
 #include "syscall-x86_64.h"
 #elif defined(__ia64__)
@@ -47,20 +50,20 @@
 
 #define io_syscall1(type,fname,sname,type1,arg1) \
 type fname(type1 arg1) \
-_body_io_syscall(sname, (long)arg1)
+_body_io_syscall(sname, __syscall_arg(arg1))
 
 #define io_syscall2(type,fname,sname,type1,arg1,type2,arg2) \
 type fname(type1 arg1,type2 arg2) \
-_body_io_syscall(sname, (long)arg1, (long)arg2)
+_body_io_syscall(sname, __syscall_arg(arg1), __syscall_arg(arg2))
 
 #define io_syscall3(type,fname,sname,type1,arg1,type2,arg2,type3,arg3) \
 type fname(type1 arg1,type2 arg2,type3 arg3) \
-_body_io_syscall(sname, (long)arg1, (long)arg2, (long)arg3)
+_body_io_syscall(sname, __syscall_arg(arg1), __syscall_arg(arg2), __syscall_arg(arg3))
 
 #define io_syscall4(type,fname,sname,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
 type fname (type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
-_body_io_syscall(sname, (long)arg1, (long)arg2, (long)arg3, (long)arg4)
+_body_io_syscall(sname, __syscall_arg(arg1), __syscall_arg(arg2), __syscall_arg(arg3), __syscall_arg(arg4))
 
 #define io_syscall5(type,fname,sname,type1,arg1,type2,arg2,type3,arg3,type4,arg4, type5,arg5) \
 type fname (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5) \
-_body_io_syscall(sname, (long)arg1, (long)arg2, (long)arg3, (long)arg4, (long)arg5)
+_body_io_syscall(sname, __syscall_arg(arg1), __syscall_arg(arg2), __syscall_arg(arg3), __syscall_arg(arg4), __syscall_arg(arg5))
